function PointsVector.new 0
push constant 3
call Memory.alloc 1
pop pointer 0
push constant 4
pop this 2
push this 2
call Array.new 1
pop this 0
push constant 0
pop this 1
push pointer 0
return
function PointsVector.dispose 0
push argument 0
pop pointer 0
push pointer 0
push this 0
call PointsVector.disposePointsArray 2
pop temp 0
push pointer 0
call Memory.deAlloc 1
pop temp 0
push constant 0
return
function PointsVector.disposePointsArray 2
push argument 0
pop pointer 0
push constant 0
pop local 1
label WHILE_EXP0
push local 1
push this 1
lt
not
if-goto WHILE_END0
push local 1
push argument 1
add
pop pointer 1
push that 0
pop local 0
push local 0
call Point.dispose 1
pop temp 0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP0
label WHILE_END0
push argument 1
call Array.dispose 1
pop temp 0
push constant 0
return
function PointsVector.getSize 0
push argument 0
pop pointer 0
push this 1
return
function PointsVector.add 0
push argument 0
pop pointer 0
push this 1
push this 2
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push pointer 0
call PointsVector.grow 1
pop temp 0
label IF_FALSE0
push this 1
push this 0
add
push argument 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push this 1
push constant 1
add
pop this 1
push constant 0
return
function PointsVector.get 0
push argument 0
pop pointer 0
push argument 1
push this 0
add
pop pointer 1
push that 0
return
function PointsVector.remove 2
push argument 0
pop pointer 0
push argument 1
pop local 1
push argument 1
push this 1
lt
not
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
return
label IF_FALSE0
push pointer 0
push argument 1
call PointsVector.get 2
pop local 0
push local 0
call Point.dispose 1
pop temp 0
push this 1
push constant 1
sub
pop this 1
label WHILE_EXP0
push local 1
push this 1
lt
not
if-goto WHILE_END0
push local 1
push this 0
add
push local 1
push constant 1
add
push this 0
add
pop pointer 1
push that 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function PointsVector.find 1
push argument 0
pop pointer 0
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push this 1
lt
not
if-goto WHILE_END0
push argument 1
push local 0
push this 0
add
pop pointer 1
push that 0
call Point.equals 2
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 0
return
label IF_FALSE0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 1
neg
return
function PointsVector.grow 2
push argument 0
pop pointer 0
push constant 0
pop local 1
push this 2
push constant 2
call Math.multiply 2
pop this 2
push this 2
call Array.new 1
pop local 0
label WHILE_EXP0
push local 1
push this 1
lt
not
if-goto WHILE_END0
push local 1
push local 0
add
push local 1
push this 0
add
pop pointer 1
push that 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP0
label WHILE_END0
push this 0
call Array.dispose 1
pop temp 0
push local 0
pop this 0
push constant 0
return
