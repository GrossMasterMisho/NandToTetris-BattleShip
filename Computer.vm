function Computer.new 0
push constant 5
call Memory.alloc 1
pop pointer 0
push argument 0
pop this 2
push argument 1
pop this 3
call PointsVector.new 0
pop this 0
call PointsVector.new 0
pop this 1
push constant 1
neg
push constant 1
neg
call Point.new 2
pop this 4
push pointer 0
call Computer.fillLeftPoints 1
pop temp 0
push pointer 0
return
function Computer.dispose 0
push argument 0
pop pointer 0
push this 4
call Point.dispose 1
pop temp 0
push this 0
call PointsVector.dispose 1
pop temp 0
push this 1
call PointsVector.dispose 1
pop temp 0
push pointer 0
call Memory.deAlloc 1
pop temp 0
push constant 0
return
function Computer.getPossibleMovesNum 0
push argument 0
pop pointer 0
push this 0
call PointsVector.getSize 1
return
function Computer.hasBestMoves 0
push argument 0
pop pointer 0
push this 1
call PointsVector.getSize 1
push constant 0
gt
return
function Computer.fillLeftPoints 2
push argument 0
pop pointer 0
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push this 2
lt
not
if-goto WHILE_END0
push constant 0
pop local 1
label WHILE_EXP1
push local 1
push this 3
lt
not
if-goto WHILE_END1
push this 0
push local 0
push local 1
call Point.new 2
call PointsVector.add 2
pop temp 0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP1
label WHILE_END1
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Computer.generateShips 3
push argument 0
pop pointer 0
push constant 7
call Array.new 1
pop local 0
push constant 7
call Randomizer.getRandom 1
pop local 2
push local 2
push constant 2
call Randomizer.mod 2
push constant 0
eq
pop local 1
push constant 0
push constant 0
call Output.moveCursor 2
pop temp 0
push constant 0
push local 0
add
push pointer 0
push argument 1
push constant 5
push local 1
call Computer.generateSingleShip 4
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 1
push local 0
add
push pointer 0
push argument 1
push constant 4
push local 1
not
call Computer.generateSingleShip 4
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 2
push local 0
add
push pointer 0
push argument 1
push constant 3
push local 1
call Computer.generateSingleShip 4
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 3
push local 0
add
push pointer 0
push argument 1
push constant 2
push local 1
not
call Computer.generateSingleShip 4
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 4
push local 0
add
push pointer 0
push argument 1
push constant 2
push local 1
call Computer.generateSingleShip 4
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 5
push local 0
add
push pointer 0
push argument 1
push constant 1
push local 1
not
call Computer.generateSingleShip 4
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 6
push local 0
add
push pointer 0
push argument 1
push constant 1
push local 1
call Computer.generateSingleShip 4
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
return
function Computer.generateSingleShip 4
push argument 0
pop pointer 0
push argument 1
push argument 2
push argument 3
call Board.generateValidPointsForShip 3
pop local 1
push local 1
call PointsVector.getSize 1
call Randomizer.getRandom 1
pop local 3
push local 1
push local 3
call PointsVector.get 2
pop local 2
push argument 2
push local 2
call Point.getX 1
push local 2
call Point.getY 1
push argument 3
call Ship.new 4
pop local 0
push argument 1
push local 0
call Board.placeSingleShip 2
pop temp 0
push local 2
call Point.dispose 1
pop temp 0
push local 1
call PointsVector.dispose 1
pop temp 0
push local 0
return
function Computer.play 2
push argument 0
pop pointer 0
push this 1
call PointsVector.getSize 1
push constant 0
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push this 1
push constant 0
call PointsVector.get 2
pop local 1
push pointer 0
push local 1
call Computer.copy 2
pop local 1
push this 1
push constant 0
call PointsVector.remove 2
pop temp 0
push this 0
push local 1
call PointsVector.find 2
pop local 0
push this 0
push local 0
call PointsVector.remove 2
pop temp 0
push local 1
return
label IF_FALSE0
push this 0
push argument 1
call PointsVector.get 2
pop local 1
push pointer 0
push local 1
call Computer.copy 2
pop local 1
push this 0
push argument 1
call PointsVector.remove 2
pop temp 0
push local 1
return
function Computer.shipHasBeenDestroyed 2
push argument 0
pop pointer 0
push constant 0
pop local 1
push argument 1
call Ship.getPoints 1
pop local 0
label WHILE_EXP0
push local 1
push argument 1
call Ship.getLength 1
lt
not
if-goto WHILE_END0
push pointer 0
push local 1
push local 0
add
pop pointer 1
push that 0
call Computer.filterAllNeighbouringPoints 2
pop temp 0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP0
label WHILE_END0
push this 1
call PointsVector.dispose 1
pop temp 0
call PointsVector.new 0
pop this 1
push constant 0
return
function Computer.filterAllNeighbouringPoints 4
push argument 0
pop pointer 0
push constant 1
neg
pop local 1
label WHILE_EXP0
push local 1
push constant 2
lt
not
if-goto WHILE_END0
push constant 1
neg
pop local 2
label WHILE_EXP1
push local 2
push constant 2
lt
not
if-goto WHILE_END1
push argument 1
call Point.getX 1
push local 1
add
push argument 1
call Point.getY 1
push local 2
add
call Point.new 2
pop local 0
push this 0
push local 0
call PointsVector.find 2
pop local 3
push local 3
push constant 1
neg
eq
not
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push this 0
push local 3
call PointsVector.remove 2
pop temp 0
label IF_FALSE0
push local 0
call Point.dispose 1
pop temp 0
push local 2
push constant 1
add
pop local 2
goto WHILE_EXP1
label WHILE_END1
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Computer.shipHasBeenInjured 0
push argument 0
pop pointer 0
push pointer 0
push argument 1
call Computer.filterAllDiagonalPoints 2
pop temp 0
push this 1
call PointsVector.getSize 1
push constant 0
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push pointer 0
push argument 1
call Computer.updateBestMoves 2
pop this 1
goto IF_END0
label IF_FALSE0
push this 1
call PointsVector.dispose 1
pop temp 0
push pointer 0
push argument 1
call Computer.findBestMoves 2
pop this 1
label IF_END0
push this 4
call Point.dispose 1
pop temp 0
push argument 1
pop this 4
push constant 0
return
function Computer.findBestMoves 4
push argument 0
pop pointer 0
call PointsVector.new 0
pop local 0
push constant 1
neg
pop local 2
label WHILE_EXP0
push local 2
push constant 2
lt
not
if-goto WHILE_END0
push constant 1
neg
pop local 3
label WHILE_EXP1
push local 3
push constant 2
lt
not
if-goto WHILE_END1
push local 2
push local 3
add
push constant 1
neg
eq
push local 2
push local 3
add
push constant 1
eq
or
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 1
call Point.getX 1
push local 2
add
push argument 1
call Point.getY 1
push local 3
add
call Point.new 2
pop local 1
push this 0
push local 1
call PointsVector.find 2
push constant 1
neg
eq
not
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 0
push local 1
call PointsVector.add 2
pop temp 0
goto IF_END1
label IF_FALSE1
push local 1
call Point.dispose 1
pop temp 0
label IF_END1
label IF_FALSE0
push local 3
push constant 1
add
pop local 3
goto WHILE_EXP1
label WHILE_END1
push local 2
push constant 1
add
pop local 2
goto WHILE_EXP0
label WHILE_END0
push local 0
return
function Computer.updateBestMoves 5
push argument 0
pop pointer 0
call PointsVector.new 0
pop local 1
push constant 0
pop local 3
label WHILE_EXP0
push local 3
push this 1
call PointsVector.getSize 1
lt
not
if-goto WHILE_END0
push this 1
push local 3
call PointsVector.get 2
pop local 2
push this 0
push local 2
call PointsVector.find 2
push constant 1
neg
eq
not
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 1
push pointer 0
push local 2
call Computer.copy 2
call PointsVector.add 2
pop temp 0
label IF_FALSE0
push local 3
push constant 1
add
pop local 3
goto WHILE_EXP0
label WHILE_END0
push pointer 0
push argument 1
call Computer.findBestMoves 2
pop local 0
push constant 0
pop local 3
label WHILE_EXP1
push local 3
push local 0
call PointsVector.getSize 1
lt
not
if-goto WHILE_END1
push local 0
push local 3
call PointsVector.get 2
pop local 2
push local 1
push pointer 0
push local 2
call Computer.copy 2
call PointsVector.add 2
pop temp 0
push local 3
push constant 1
add
pop local 3
goto WHILE_EXP1
label WHILE_END1
push local 0
call PointsVector.dispose 1
pop temp 0
push this 1
call PointsVector.dispose 1
pop temp 0
push local 1
return
function Computer.filterAllDiagonalPoints 4
push argument 0
pop pointer 0
push constant 1
neg
pop local 1
label WHILE_EXP0
push local 1
push constant 2
lt
not
if-goto WHILE_END0
push constant 1
neg
pop local 2
label WHILE_EXP1
push local 2
push constant 2
lt
not
if-goto WHILE_END1
push argument 1
call Point.getX 1
push local 1
add
push argument 1
call Point.getY 1
push local 2
add
call Point.new 2
pop local 0
push this 0
push local 0
call PointsVector.find 2
pop local 3
push local 3
push constant 1
neg
eq
not
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push this 0
push local 3
call PointsVector.remove 2
pop temp 0
label IF_FALSE0
push local 0
call Point.dispose 1
pop temp 0
push local 2
push constant 2
add
pop local 2
goto WHILE_EXP1
label WHILE_END1
push local 1
push constant 2
add
pop local 1
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Computer.copy 0
push argument 0
pop pointer 0
push argument 1
call Point.getX 1
push argument 1
call Point.getY 1
call Point.new 2
return
